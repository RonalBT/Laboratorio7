/*
 * File:   Lab7.c
 * Author: Ronal
 *
 * Created on 10 de abril de 2023, 04:05 PM
 */
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits Write protection off)
// #pragma config statements should precedeproject file includes.
// Use project enums instead of #define for ON and OFF.
       

#include <xc.h>
#include <stdio.h>
#include <stdint.h>

//Definición de frecuencia para el Delay
#define _XTAL_FREQ 4000000
//Definiciones 
#define tmr0_val 249 //Interrupciones en 0.15uS
#define POT_MIN 0
#define POT_MAX 255
#define PWM_MIN 100
#define PWM_MAX 650

//Definición para pines
#define fake_pwm PORTCbits.RC3

//Variables Globales
unsigned short CCPR=0; //Variable par CCPR1
unsigned short CCPR_b=0; // Variabel para CCPR2
uint8_t cont_led; //Variable para el conteo de comparación para señal Pseudo PWM
int pwm_led; // variable para almacenar Valor de ADC pot3 para el pwm

//Proto funciones
void setup(void);

void tmr0_setup(void);

//Función para interpolación 
unsigned short interpol(uint8_t val, uint8_t pot_min, uint8_t port_max, 
        unsigned short pwm_min, unsigned short pwm_max);

//Configuración principal
void setup(void){
    ANSEL = 0b00000111; //Puertos AN0, AN1, y AN2 definidos como analógicos
    ANSELH = 0;
    TRISA = 0b00000111; // definiendo los puertos AN0 1 y 2 como entradas
    PORTA = 0; //Limpieza del puerto A
    PORTC = 0; //limpieza del puerto C
    
    //Interrupciones
    INTCONbits.GIE = 1; //Interrupcions globales
    INTCONbits.PEIE = 1; //Habilitar interrupciones en periféricos 
    INTCONbits.T0IE = 1; // Habilitar interrupciones en TMR0
    PIR1bits.ADIF = 0; // Limpieza de bandera en la interrupción del ADC
    PIE1bits.ADIE = 1; // Habilitar interrupción del ADC
    INTCONbits.T0IF = 0; //Limpiar bandera en interrupciones del TMR0
    
    OSCCONbits.IRCF = 0b0110; //Frecuencia del oscilador interno a 4MHz
    OSCCONbits.SCS = 1; //Intern clock
    
    // COnfiguración del ADC
    ADCON0bits.ADCS = 0b10; //FOSC/32
    ADCON1bits.VCFG0 = 0; // VDD como voltaje interno de referencia
    ADCON1bits.VCFG1= 0; // VSS como voltaje de referencia interno
    
    ADCON0bits.CHS = 0b0000; //entrada AN0 como voltage entry del ADC
    ADCON1bits.ADFM = 0; // Formato de bits justificados en izquierda
    ADCON0bits.ADON = 1; // Habilitación del móduclo ADC
    __delay_us(320); // Read time
    
    //Configuración del PWM
    TRISCbits.TRISC2=1; //CCP1 como entrada
    TRISCbits.TRISC1=1; //CCP2 como entrada
    PR2 = 249; //periodo del TMR2 en 4us
    
    //Configuración del CCP
    CCP1CON=0; //CCP1 off
    CCP2CON=0; //CCP2 off
    CCP1CONbits.P1M=0; //Puesto como salida individual
    CCP1CONbits.CCP1M = 0b1100; //PWM en CCP1
    CCP2CONbits.CCP2M = 0b110; // PWM en CCP2
    
    CCPR1L = 250>>2; //ANcho de pulso
    CCP1CONbits.DC1B = 250 & 0b11;
    CCPR2L = 250 >> 2;
    CCP2CONbits.DC2B0 = 250 & 0b01;
    CCP2CONbits.DC2B1 = 250 & 0b10;
    
    T2CONbits.T2CKPS = 0b11; //Prescaler del TMR2 en 1:16
    PIR1bits.TMR2IF = 0; //Limpieza en interrupción del TMR
    T2CONbits.TMR2ON =1; // TMR ON
    while(!PIR1bits.TMR2IF); //Espera del ciclo individual del TMr2
    PIR1bits.TMR1IF=0; //Limpieza de bandera
    
    TRISCbits.TRISC3 = 0; //Habilitar salida de RC3}
    TRISCbits.TRISC2 = 0; //Habilitar salida en RC2 del PWM
    TRISCbits.TRISC1 = 0; //Habilitar salida en RC1 del PWM
    return;
}

//Configuración del TMR0
void tmr0_setup(void){
    OPTION_REGbits.T0CS=0; //CIclo interno
    OPTION_REGbits.PSA=0;//Cambio del prescaler
    OPTION_REGbits.PS0=0; //Prescaler en 1:2
    OPTION_REGbits.PS1=0;
    OPTION_REGbits.PS2=0; 
    
    INTCONbits.T0IF = 0; // Limpiar 
    TMR0 = tmr0_val; 
    return;
}
//Interpolación de valores

unsigned short interpol(uint8_t val, uint8_t pot_min, uint8_t pot_max,
        unsigned short pwm_min, unsigned short pwm_max){
    return (unsigned short )(pwm_min+((float)(pwm_max-pwm_min)/(pot_max-pot_min))
            *(val-pot_min));
}

//Interrupciones
void __interrupt() isr(void){
    if(PIR1bits.ADIF){ //REVISAR INTERRUPCIÓN ADC
        if (ADCON0bits.CHS == 0){ //REVISAR ACTIVACIÓN DE AN0
            CCPR = interpol(ADRESH, POT_MIN, POT_MAX, PWM_MIN, PWM_MAX); //iNTERPOLACIÓN PARA ANCHO DE PULSO
            CCPR1L= (uint8_t)(CCPR>>2); //Asignar al CCPR1L los 8 bits más significativos
            CCP1CONbits.DC1B = CCPR & 0b11; // Asignar al DC1B los 2 bits menos significativos
            
        }
        else if (ADCON0bits.CHS == 1){ //REvisar activación de AN1
            CCPR_b = interpol(ADRESH, POT_MIN, POT_MAX, PWM_MIN, PWM_MAX);
            CCPR2L = (uint8_t)(CCPR_b >> 2);
            CCP2CONbits.DC2B0 = CCPR_b & 0b01;
            CCP2CONbits.DC2B1 = CCPR_b & 0b10;
        }
        else if (ADCON0bits.CHS ==2){ //REvisar activación del AN2
            pwm_led = ADRESH; // valor del pwm para el led
        }
        PIR1bits.ADIF = 0; //Limpieza de bandera de interrupción ADC
    }
    if(INTCONbits.T0IF){ //Interrupción de TMR0 activar
        cont_led++; //Incrementar contador
        if (cont_led <= pwm_led){ // comparar valor de contador con valor del pot
            fake_pwm =1; //Si el valor es menor o igual encender el puerto
        }
        else{
            fake_pwm=0; //Apagar el puerto si no
        }
        INTCONbits.T0IF =0;  //Limpiear bander de interrupción
        TMR0 = tmr0_val; //REiniciar TMR
    }
}
void main(void){
    //Configuración
    setup();
    tmr0_setup();
    
    //LOOP principal
    while (1){
        if(ADCON0bits.GO==0){
            if(ADCON0bits.CHS==0){
                ADCON0bits.CHS=1;
                __delay_us(40);
            }
            else if (ADCON0bits.CHS==1){
                ADCON0bits.CHS=2;
                __delay_us(40);
            }
            else if (ADCON0bits.CHS==2){
                ADCON0bits.CHS=0;
                __delay_us(40);
            }
            __delay_us(40);
            ADCON0bits.GO=1;
        }
    }
    return;
}

